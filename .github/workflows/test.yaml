name: Snakemake Python Tests

# Trigger the workflow on pushes and pull requests to main and dev
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  test_python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']  # Test across multiple Python versions

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Includes pytest, pytest-cov, etc.

      # Run pytest tests
      - name: Run pytest
        run: |
          pytest tests/ --junitxml=test-results.xml --cov=scripts/ --cov-report=xml
        env:
          PYTHONPATH: ${{ github.workspace }}  # Ensures scripts/ is importable

      # Publish test results
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()  # Runs even if tests fail
        with:
          name: Pytest Results (${{ matrix.python-version }})
          path: test-results.xml
          reporter: java-junit

      # Upload coverage report
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: success()  # Only upload if tests pass
        with:
          file: ./coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}  # Add token in GitHub Secrets

  test_snakemake:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']  # Validate Snakemake with one version (adjust as needed)

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Includes snakemake

      # Validate Snakemake workflow with a dry-run
      - name: Snakemake dry-run
        run: |
          snakemake --dry-run --cores 1
        env:
          PYTHONPATH: ${{ github.workspace }}  # Ensures scripts are accessible
